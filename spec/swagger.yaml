openapi: "3.0.1"
info:
  title: Critter Caravan API
  version: "1.0.0"
  description: |
    The Critter Caravan API allows you to interact with the backend service for the Critter Caravan video game, granting you access to level and user management for the game data. It is meant to be used by the game client itself to access or store information persistently.

    ### Features include:

    * Registering users and Authentication
    * Updating user data
    * Fetching levels using a pagination interface with filter and sorting options
    * Uploading and updating custom levels

  license:
    name: MIT License
    url: https://opensource.org/license/mit

servers:
  - url: http://127.0.0.1:8000
    description: Backend Server

  - url: mysql://127.0.0.1:3306
    description: The MySQL Database for the backend

defaultContentType: application/json

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        avatar:
          type: string
          nullable: true

    UserForUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    LevelForUpdate:
      type: object
      properties:
        name:
          type: string
        private:
          type: boolean
        thumbnail:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        world:
          type: string

    LevelForCreate:
      allOf:
        - $ref: "#/components/schemas/LevelForUpdate"
        - required:
            - name
            - private
            - world

    Level:
      allOf:
        - $ref: "#/components/schemas/LevelForUpdate"
        - properties:
            id:
              type: string
            author_id:
              type: string
            created_at:
              type: string
              format: date-time
            modified_at:
              type: string
              format: date-time
            reviews:
              type: object
              properties:
                likes:
                  type: integer
                completions:
                  type: integer
            verification_level:
              type: integer
            world:
              type: string

    LevelSearchQueryParams:
      type: object
      properties:
        per_page:
          type: integer
          default: 50
        sort:
          type: string
          enum:
            - upload_date
            - modified_date
            - name
        sort_asc:
          type: boolean
          default: false
        author:
          type: string
          description: The ID of the author
        category:
          type: string
        min_verification:
          type: integer
          default: 0
        max_verification:
          type: integer
          default: -1

    PaginatedLevel:
      type: object
      properties:
        total:
          type: integer
          description: The total number of levels
        per_page:
          type: integer
          description: The number of levels per page
          default: 50
        current_page:
          type: integer
          description: The current page number
        last_page:
          type: integer
          description: The last page number
        first_page_url:
          type: string
          description: URL to the first page of results
        last_page_url:
          type: string
          description: URL to the last page of results
        prev_page_url:
          type: string
          nullable: true
          description: URL to the previous page, if available
        next_page_url:
          type: string
          nullable: true
          description: URL to the next page, if available
        path:
          type: string
          description: The base URL for the paginated resource
        from:
          type: integer
          description: The index of the first element in the current page (1-indexed)
        to:
          type: integer
          description: The index of the last element in the current page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Level"

    SessionData:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
        token_type:
          type: string
        expires:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: object
                additionalProperties:
                  type: string

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

  parameters:
    LevelSearchQueryParams:
      name: LevelSearchQueryParams
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/LevelSearchQueryParams"

  examples:
    LevelSearchExample:
      summary: Example level search query params
      value:
        per_page: 10
        sort: "upload_date"
        sort_asc: true
        author: "123"
        category: "puzzle"
        min_verification: 0
        max_verification: 5

paths:
  /api/auth/me:
    get:
      summary: Get the current user details
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      tags: [Auth]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"

  /api/auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              username: newUser
              email: newuser@example.com
              password: password123
      responses:
        "200":
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request due to validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"

  /api/auth/login:
    post:
      summary: Login a user and receive a JWT token
      operationId: loginUser
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              username: user123
              password: password123
      responses:
        "200":
          description: Successfully logged in and received JWT token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionData"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"

  /api/auth/refresh:
    post:
      summary: Refresh the authentication token
      operationId: refreshToken
      security:
        - BearerAuth: []
      tags: [Auth]
      responses:
        "200":
          description: Successfully refreshed the token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionData"
        "401":
          description: Unauthorized, invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"

  /api/auth/logout:
    post:
      summary: Logout the current user and invalidate the token
      operationId: logoutUser
      security:
        - BearerAuth: []
      tags: [Auth]
      responses:
        "200":
          description: Successfully logged out
        "401":
          description: Unauthorized, no token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
  /api/users:
    get:
      summary: Get all users
      operationId: getUsers
      security:
        - BearerAuth: []
      tags: [Users]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /api/users/{userId}:
    get:
      summary: Get user details by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      tags: [Users]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized, no token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, user does not have access
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a user (admin only)
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      tags: [Users]
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, only admin can delete
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
    put:
      summary: Update a User
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForUpdate"
      tags: [Users]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized, no token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, user must be admin or target user
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict, a user with the given email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Conflict"

  /api/levels:
    get:
      summary: Get a paginated list of levels
      operationId: getLevels
      parameters:
        - $ref: "#/components/parameters/LevelSearchQueryParams"
      tags: [Levels]
      responses:
        "200":
          description: Successful response, paginated list of levels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLevel"
        "400":
          description: Bad request, invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"

    post:
      summary: Create a level
      operationId: createLevel
      security:
        - BearerAuth: []
      tags: [Levels]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LevelForCreate"
      responses:
        "201":
          description: Level created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
        "401":
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, the user is not authorized to modify the level
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"

  /api/levels/{levelId}:
    get:
      summary: Get details of a specific level by ID
      operationId: getLevelById
      tags: [Levels]
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
        "401":
          description: Unauthorized, no token provided or level is private
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, the level is private and the user is not the author
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: Level not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"

    put:
      summary: Update a level
      operationId: updateLevel
      security:
        - BearerAuth: []
      tags: [Levels]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LevelForUpdate"
      responses:
        "200":
          description: Level updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
        "401":
          description: Unauthorized, no token provided
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, the user is not authorized to modify the level
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: Level not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a level by ID
      operationId: deleteLevelById
      tags: [Levels]
      security:
        - BearerAuth: []
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful response with no content
        "401":
          description: Unauthorized, no token provided or level is private
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden, the user is not authorized to delete the level
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "404":
          description: Level not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
